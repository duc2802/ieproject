%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: h1.1-svm-example.dvi
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o h1.1-svm-example.ps h1.1-svm-example.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2004.01.23:1219
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (h1.1-svm-example.dvi)
@start
%DVIPSBitmapFont: Fa cmex10 10 7
/Fa 7 89 df<B612F0A600FCC8FCB3B3B3B3B3B3B3B01C94668137>50
D<B612F0A6C71203B3B3B3B3B3B3B3B01C94808137>I<12FCB3B3B3B3B3B3B3B0B612F0
A61C94668237>I<EC03F0B3B3B3B3B3B3B3B0B6FCA61C94808237>I<12FCB3B3B0063466
8037>I<12FCB3B3B006346A8037>I<BF12E08AA38A6C90CCFC0900806C6D19076C6D0700
7F6C6D1A1F1D076C6DF201FF6C6D747E6C6DF33F801E0F6C6D1B076D6CF303C06D6D1A01
F600E06D7F6D6D1B706D1D30816D6D1B186D6D1B007F816E7E6E7FA26E7F6E7F6E7FA26E
7F6E7F6E7FA26F7E6F7F6F7FA26F7F6F7F81836F7F6F7F167F83707F707F8284707F707F
A2707F82715A60173F715A604D5A4DCDFC17FEA24C5A4C5A4C5A4C5A4C5A5F163F4CCEFC
16FE4B5A4B5A4B5AA24B5A4B5A4B5A4BCFFC15FEA24A5A4A5A4A481B184A481B304A5A4B
1B70023F1C604ACF12E002FE1B014948F303C049481B074948F30F801E1F49481B7F4948
F3FF0049481A0349CE120F01FEF37FFEF403FF48481A7F4848077FB55A48BEFC48655AA2
48655ABFFC666D747B7F78>88 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi8 8 5
/Fb 5 109 df<123C127EB4FCA21380A2127F123D1201A312031300A25A1206120E5A5A
5A126009157A8714>59 D<000FB8FCA23B1FC003F8003F0100151F001C4A130E123C0038
01071406123000704A130EA20060010F140C12E0485CA2141FC715005DA2143FA292C8FC
A25CA2147EA214FEA25CA21301A25CA21303A25CA21307A25C130F131F001FB512F0A230
2D7FAC29>84 D<1307EB0F80EB1FC0A2EB0F80EB070090C7FCA9EA01E0EA07F8EA0E3CEA
1C3E123812301270EA607EEAE07C12C013FC485A120012015B12035BA21207EBC04014C0
120F13801381381F01801303EB0700EA0F06131EEA07F8EA01F0122E7EAC18>105
D<15E0EC01F01403A3EC01C091C7FCA9147CEB03FE9038078F80EB0E07131C013813C013
30EB700F0160138013E013C0EB801F13001500A25CA2143EA2147EA2147CA214FCA25CA2
1301A25CA21303A25CA2130700385BEAFC0F5C49C7FCEAF83EEAF0F8EA7FF0EA1F801C3B
81AC1D>I<137CEA0FFCA21200A213F8A21201A213F0A21203A213E0A21207A213C0A212
0FA21380A2121FA21300A25AA2123EA2127EA2127CA2EAFC08131812F8A21338133012F0
1370EAF860EA78E0EA3FC0EA0F000E2F7DAD15>108 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmsy10 12 2
/Fc 2 22 df<007FB912E0BA12F0A26C18E03C04789A4D>0 D<127012FCB4FCEA7FC0EA
1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FC913801FF
809138007FE0ED1FF8ED07FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FE0EF0F
F8EF03FE943800FF80F03FE0F00FF0A2F03FE0F0FF80943803FE00EF0FF8EF3FE0EFFF80
DC03FEC7FCEE0FF8EE3FE0EEFF80DB03FEC8FCED1FF8ED7FE0913801FF80DA07FEC9FCEC
1FF0EC7FC04948CAFCEB07FCEB1FF0EB7FC04848CBFCEA07FCEA1FF0EA7FC048CCFC12FC
1270CDFCB0007FB912E0BA12F0A26C18E03C4E78BE4D>21 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmr8 8 6
/Fd 6 62 df<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA2172C7AAB23
>49 D<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E012F000FC
14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C495A495A49
5A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A4814C0B6FC
A21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB800F
1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F8015
C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001EEB
3F00380780FC3801FFF038007FC01C2D7DAB23>I<140EA2141E143EA2147E14FEA2EB01
BE1303143E1306130E130C131813381330136013E013C0EA0180120313001206120E120C
5A123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23>I<123C127E
12FFA4127E123C1200AD123C127E12FFA4127E123C081D7A9C14>58
D<B812FCA3CBFCADB812FCA32E137C9937>61 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmmi12 12 8
/Fe 8 122 df<EC03FCEC1FFF9138FE07C0903903F001F049486C7ED91FC06D130E4948
137C49C76C130C01FE143F4848161C48486E131800071680491638000F173048481670EF
C060485A18E0040F13C0484815C1188017C300FFEEC70090C813C617CE17DCEE1FD84816
F85F5F5FA5007E153F167F6C03EF1338ED03CF6C6CD90F0713306C6C011C14706C6C9039
F803E0E03C01F00FE001E1C026007FFFC7EAFF80D91FF0EC3E00372D7CAB3E>11
D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380120313005A
1206120E5A5A5A12600B1D78891B>59 D<4CB46C1318043F01F013384BB512FC0307D900
7E1378DB1FF090380F80F0DB7F80EB03C1DA01FEC7EA01C34A48EC00E7DA0FF0ED7FE04A
48153F4A5A02FFC9121F494817C04948160F495A130F4A178049481607495A137F494817
0091CAFC5A485A1906485AA2485A96C7FC121F5BA2123F5BA3127F5BA4485A4CB612805E
A293C7EBE000725AA3007F60A218FF96C7FCA26C7E5F606C7EA2000F16036D5E6C6C1507
0003160F6C6C151F6C6CED3DF8D97F8014786D6CEB01E0D91FF0903807C078D907FE9038
7F00700101B500FC1330D9003F01F090C8FC020790CAFC45487CC54D>71
D<91B612F8A3020001E0C8FC6F5A4B5AA293C9FCA35C5DA314035DA314075DA3140F5DA3
141F5DA3143F5DA3147F5DA314FF92CAFCA35B4A16C0A21801010317804A15031900A201
075E4A1506180E181E010F161C4A153C18381878011F16F84A4A5A1703013F150F4D5A4A
14FF01FF02075BB9FCA2603A447CC342>76 D<EB0FE0EA07FFA338001FC0130F131FA25C
A3133F91C8FCA35B137EA313FE5BA312015BEC0FC0EC3FF00003EBF07C9038F3C03E9038
F7001F01FE14804848130F4914C05B16E0485A5BA3121F5BA2151F123F90C7FCA2153F48
15C0127EA2157F16805A16005DA24A5A007C5CA24A5A4A5A5D003C130F003E495A001E49
5A001F017EC7FC6C5B3807C1F03801FFC06C6CC8FC23467CC429>98
D<013E1738D9FF80D901C013FC2603C3C0903907E001FE380703E0380601F0000E150F00
1C16C0D8180316000038187E0030031F143E00705ED86007171E5C163FD8E00F92C7121C
00C049160CEA001F4A49141C047E1418133F91C7FC04FE1438491730017E5CA203011570
01FE1760495C19E019C0A24949481301198018031900606D0107140670130E017C010F5C
017E010C1418013ED91CFC13386DD9387E13F0903B0FC0F01F01C0903B03FFC00FFF8090
28007F0001FEC7FC3F2D7DAB46>119 D<02FCEB07E0903A03FF801FFC903A0F07C0781E
903A1C03E0E01F903A3801F1C07FD9700013804901FB13FF4848EBFF00495B000316FE90
C71438484A130012061401000E5C120CC7FC14035DA314075DA3140F5DA3021F14381730
5D1770023F1460121E003F16E0267F807FEB01C0026F148000FF01EF1303D901CFEB0700
00FE903887C00E267C03835B3A3C0F01E0783A1FFC00FFE0D803F0EB3F80302D7EAB37>
I<133ED9FF8014E02603C3C0EB03F0380703E0380601F0000E1507001C16E0EA18031238
0030150F007016C0EA60075C161FD8E00F158000C05BEA001F4A133F1700133F91C7FC5E
49147E137EA216FE01FE5C5BA215015E485AA215035EA200001407150F6D5C017C131F15
3F6D13FF90391F03CFC0903807FF8F903801FC0F90C7121F5EA2153F93C7FCD807C05BD8
1FE0137E5DA24848485A4A5A01805B39380007C00018495A001C49C8FC6C137C380781F8
3803FFE0C66CC9FC2C407DAB30>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmr12 12 45
/Ff 45 123 df<4AB4FC020F13E091387F80F8903901FC001C49487FD907E0130F494813
7F011FECFF80495A49C7FCA25B49EC7F00163E93C7FCACEE3F80B8FCA3C648C7FC167F16
3FB3B0486CEC7FC0007FD9FC1FB5FCA330467EC536>12 D<140C141C1438147014E0EB01
C01303EB0780EB0F00A2131E5BA25B13F85B12015B1203A2485AA3485AA348C7FCA35AA2
123EA2127EA4127CA312FCB3A2127CA3127EA4123EA2123FA27EA36C7EA36C7EA36C7EA2
12017F12007F13787FA27F7FA2EB0780EB03C01301EB00E014701438141C140C166476CA
26>40 D<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378137C133C133E131E131F
A2EB0F80A3EB07C0A3EB03E0A314F0A21301A214F8A41300A314FCB3A214F8A31301A414
F0A21303A214E0A3EB07C0A3EB0F80A3EB1F00A2131E133E133C137C13785BA2485A485A
A2485A48C7FC120E5A5A5A5A5A16647BCA26>I<16C04B7EB3AB007FBAFCBB1280A26C19
00C8D801E0C9FCB3AB6F5A41407BB84C>43 D<121EEA7F8012FF13C0A213E0A3127FEA1E
601200A413E013C0A312011380120313005A1206120E5A5A5A12600B1D78891B>I<121E
EA7F80A2EAFFC0A4EA7F80A2EA1E000A0A78891B>46 D<14FF010713E090381F81F89038
3E007C01FC133F4848EB1F8049130F4848EB07C04848EB03E0A2000F15F0491301001F15
F8A2003F15FCA390C8FC4815FEA54815FFB3A46C15FEA56D1301003F15FCA3001F15F8A2
6C6CEB03F0A36C6CEB07E0000315C06D130F6C6CEB1F806C6CEB3F00013E137C90381F81
F8903807FFE0010090C7FC28447CC131>48 D<143014F013011303131F13FFB5FC13E713
071200B3B3B0497E497E007FB6FCA3204278C131>I<EB03FE90381FFFC0017F13F03901
F80FFC3903C001FE48486C7E000EC7EA7F8048EC3FC0ED1FE04815F00030140F007015F8
00601407126CB415FC7F7F1503A46C4813076CC7FCC8FC16F8A2150F16F0151F16E0A2ED
3FC0ED7F8016005D5D4A5A4A5A4A5A5D4A5A4A5A4AC7FC147C5C5C495A495A495A49C712
0C131E5B013814185B5B485A4848143848C81230000E1570001FB612F0A25A5AB712E0A3
26427BC131>I<ED0380A21507150FA2151F153FA2157F15FFA25CEC03BF153F14071406
140C141C141814301470146014C013011480EB03005B13065B131C13185B1370136013E0
485A5B120390C7FC1206120E120C5A123812305A12E0B812C0A3C8383F8000ADEDFFE002
7FEBFFC0A32A437DC231>52 D<14FF010713E0011F13F890387F00FE01FC133FD801F0EB
1F804848EB0FC049EB07E00007EC03F048481301A290C713F8481400A47FA26D130116F0
7F6C6CEB03E013FC6C6CEB07C09039FF800F806C9038C01F006CEBF03EECF87839007FFE
F090383FFFC07F01077F6D13F8497F90381E7FFFD97C1F1380496C13C02601E00313E048
486C13F000079038007FF84848EB3FFC48C7120F003EEC07FE150148140016FF167F4815
3FA2161FA56C151E007C153EA2007E153C003E157C6C15F86DEB01F06C6CEB03E06C6CEB
07C0D803F8EB1F80C6B4EBFF0090383FFFFC010F13F00101138028447CC131>56
D<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCB3A5121EEA7F80A2EAFFC0A4EA7F80A2
EA1E000A2B78AA1B>58 D<007FBAFCBB1280A26C1900CEFCB0007FBAFCBB1280A26C1900
41187BA44C>61 D<B8FC17F017FC00019039C00007FF6C499038007FC0017FED1FE0EF07
F0EF03FC717E717E84727E727E727EA2727E85180385A2180185A38584A31A80AD1A00A3
6061A361180361180761180F614E5A183F614EC7FC18FEEF03FC4D5AEF1FE001FFED7FC0
486DD907FFC8FCB812FC17F094C9FC41447CC34B>68 D<B912F0A3000101C0C7127F6C6C
48EC0FF817031701170018781838A2181CA3180CA4180E1806160CA21800A5161CA2163C
167CED01FC91B5FCA3EC8001ED007C163C161CA2160CA793C8FCB08048487EB612F8A337
447CC340>70 D<DB0FFE146092B500C013E0020314F0913A0FFC01FC0191393FC0003E02
FFC7EA0F83D903FCEC03C74948EC01E74948EC00FF4948157F4948153F4948151F49C912
0F485A491607120348481603A248481601A248481600A2123FA2491760127FA396C7FC48
5AAD4CB612C06C7EA293C7387FF000725A003F171F7FA2121F7F120FA26C7EA26C7E6C7E
A26C7E6D7E6D6C153F6D7E6D6C157F6D6C15E7D903FEEC01C7D900FFEC0383DA3FE0EB0F
01DA0FFCEBFE000203B500F81360020002E090C7FCDB0FFEC9FC42487BC54D>I<B6D8C0
03B6FCA3000101E0C70007138026007F80913801FE00B3A991B7FCA30280C71201B3AC26
01FFE0913807FF80B6D8C003B6FCA340447CC349>I<B612F8A3000101E0C9FC6C6C5A5C
B3B31830A418701860A518E0A3EF01C0A217031707A2170F173F177FEE01FF48486C011F
1380B9FCA334447CC33D>76 D<003FB912F8A3903BF0001FF8001F01806D481303003EC7
150048187C0078183CA20070181CA30060180CA5481806A5C81600B3B3A54B7EED7FFE49
B77EA33F447DC346>84 D<EAFFFCA4EAF000B3B3B3B3B3A2EAFFFCA40E6476CA1B>91
D<EAFFFCA4EA003CB3B3B3B3B3A2EAFFFCA40E647ECA1B>93 D<EB07FC90383FFF809038
F80FE03903C003F048C66C7E000E6D7ED80FC0137E486C137F6D6D7EA36F7EA26C5AEA03
80C8FCA4EC0FFF49B5FC90380FFE1FEB3FC0EBFF00EA03FC485A485A485A485A127F5B17
6048C7FCA3153FA36D137F007F14EF6D9038C7E0C0003F13013A1FE00783F13B07F81E03
FF802701FFFC0113003A001FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120712031201B3
EC03FC91380FFF8091383C07E091387001F89039FDE0007E02807F01FFEC1F8091C713C0
49EC0FE049140717F0A2EE03F8A217FCA2160117FEAB17FC1603A217F8A2EE07F0A26DEC
0FE017C06D141F01FBEC3F80D9F380EB7E00D9E1C05B9039E0F001F89039C03C07E09039
801FFF80C7D803FCC7FC2F467DC436>I<EC7F80903803FFF090380FC07C90383F000F01
FCEB03804848EB01C00003140F4848EB1FE049133F120F485AA2485AED1FC0007FEC0700
92C7FCA290C9FC5AAB7E7FA2123F16307F001F15706C6C146016E06C6C14C06C6C130100
01EC03806C6CEB0700013F131E90381FC078903807FFF001001380242E7DAC2B>I<167F
ED3FFFA315018182B3EC7F80903803FFF090380FC07C90383F000E017E1307496D5AD803
F87F48487F5B000F81485AA2485AA2127FA290C8FC5AAB7E7FA2123FA26C7EA2000F5D7F
6C6C5B00035C6C6C9038077F806C6C010E13C0013F011C13FE90380FC0F8903803FFE090
26007F0013002F467DC436>I<EB01FE903807FFC090381F03F090387E00FC49137E4848
7F485A4848EB1F80000F15C049130F121F484814E01507A2007F15F090C7FCA25AA390B6
FCA290C9FCA67EA27FA2123F16306C7E1670000F15606D14E06C6C14C0000314016C6CEB
03806C6CEB0700013E131E90381F80F8903803FFE0010090C7FC242E7DAC2B>I<EC0FE0
EC7FF8903801F81E903803F03F90390FE07F8090381FC0FF5C133F495AA2ED7F0001FE13
1C92C7FCAFB67EA3C648C8FCB3B2486C7E007F13FFA321467EC51E>I<EE0F80D901FCEB
7FE0903A0FFF81F0F090393F07E3819039FC01FF033A01F800FE014848017E13E0000702
7FC7FC497F000F8149131F001F81A9000F5D6D133F000792C7FC6D5B0003147E6C6C5B6D
485A3903BF07E090380FFF80260701FCC8FC90CAFCA25AA37F6C7E7F90B512F86C14FF16
E06C15F86C6C8048B67E3A07C0000FFF48481300003FC8EA3F80003E151F48ED0FC0A248
1507A56C150F007C1680007E151F003E16006C153E6C6C5CD807E0495AD801F8EB07E0D8
007FEB3F8090261FFFFEC7FC010113E02C427DAC31>I<EA01FC12FFA3120712031201B3
EC01FE913807FFC091381E07F091383801F802707FECE000D9FDC07F5C01FF147F91C7FC
A25BA35BB3A8486CECFF80B5D8F83F13FEA32F457DC436>I<EA01E0EA07F8A2487EA46C
5AA2EA01E0C8FCADEA01FC12FFA3120712031201B3B0487EB512F8A315437DC21C>I<14
3C14FFA2491380A46D1300A2143C91C7FCADEC7F80EB3FFFA31300147F143FB3B3AA123E
127F39FF807F00A2147EA25C6C485A383C01F06C485A3807FF80D801FEC7FC195785C21E
>I<EA01FC12FFA3120712031201B3B3B3A5487EB512F8A315457DC41C>108
D<D801FC01FFEC1FE000FF010701E0EBFFFC913B0F03F801E07F913C3C01FC07803F8000
07903C7000FE0E001FC0000349D97E1C130F2601FDC0D97F38804A143001FFDA3FF06D7E
91C75BA2495DA3495DB3A8486C4A6C497EB5D8F81FB50003B512E0A34B2C7DAB52>I<39
01FC01FE00FF903807FFC091381E07F091383801F8000701707F0003EBE0002601FDC07F
5C01FF147F91C7FCA25BA35BB3A8486CECFF80B5D8F83F13FEA32F2C7DAB36>I<EC7F80
903803FFF090380FC0FC90383E001F496D7E496D7E48486D7E48486D7E48486D7E000F81
A24848147E003F157FA290C87E481680A44816C0AA6C1680A26D147F003F1600A2001F15
7E6D14FE000F5D6D130100075D6C6C495A6C6C495A6C6C495A013E49C7FC90381FC0FE90
3807FFF89038007F802A2E7DAC31>I<3901FC03FC00FF90380FFF8091383C07E0913870
01F83A07FDE000FE00030180137FD801FFEC3F8091C7EA1FC04915E049140F17F0160717
F8160317FCA3EE01FEABEE03FCA3EE07F8A217F0160F6D15E0EE1FC06D143F17806EEB7E
00D9FDC05B9039FCF003F891383C0FE091381FFF80DA03FCC7FC91C9FCAE487EB512F8A3
2F3F7DAB36>I<3903F803F000FFEB1FFCEC3C3EEC707F0007EBE0FF3803F9C000015B13
FBEC007E153C01FF13005BA45BB3A748B4FCB512FEA3202C7DAB26>114
D<90383FE0183901FFFC383907E01F78390F0003F8001E1301481300007C1478127800F8
1438A21518A27EA27E6C6C13006C7E13FC383FFFE06C13FC6C13FF6C14C06C14E0C614F0
011F13F81300EC0FFC140300C0EB01FE1400157E7E153EA27EA36C143C6C147C15786C14
F86CEB01F039F38003E039F1F00F8039E07FFE0038C00FF01F2E7DAC26>I<1306A5130E
A4131EA3133E137EA213FE12011207001FB512F0B6FCA2C648C7FCB3A4150CAA017E131C
017F1318A26D133890381F8030ECC070903807E0E0903801FFC09038007F001E3E7EBC26
>I<D801FC147F00FFEC3FFFA300071401000380000181B3A85EA35DA212006D5B017E90
38077F80017F010E13C06D011C13FE90380FC078903803FFF09026007F8013002F2D7DAB
36>I<B539F001FFFCA3000790C7EA7FE06C48EC1F8000011600160E1200160C017F5CA2
80013F5CA26E1370011F146080010F5CA2ECF00101075CA26D6C48C7FCA26E5A01011306
A26D6C5AA214FF6E5AA215B8EC3FB015F06E5AA36E5AA26E5AA36EC8FC2E2C7EAA33>I<
B500E0B539E03FFF80A30007903C000FFE000FFC00D803FCD903F8EB03F8F001E0120103
015D6D80000060A26D6E13036DD9037E91C7FCA20280017F5B013FD9063F1306A2D91FC0
6E5AED0C1FA2D90FE06E5AED180FA2D907F06E5AED3007A2D903F86E5AED6003A2902601
FCE06D5AEDC00117FCD900FFECFD80ED800017FF027F92C8FC92C77EA26E147E023E143E
A2021E143C021C141CA2412C7EAA46>I<B539F007FFFCA30003D9C00113C0C6496C1300
017F14FC013F5C6E13E06D7E010F495A6D6C485A02F890C7FC903803FC060101130E6E5A
903800FF186E5AEC3FF05D141F140F6E7E81140FEC0DFCEC19FEEC38FF4A7E9138603F80
02C07F0101131F49486C7E02007F01066D7E010E1303496D7E013C80017C80D801FC1580
D80FFE4913C0B5D8800F13FFA3302B7FAA33>I<B539F001FFFCA3000790C7EA7FE06C48
EC1F8000011600160E0000150C6D141C6D1418A26E1338013F1430A26D6C5BA26E13E001
0F5CA26D6C485AA2ECF803010391C7FCA2903801FC06A2ECFE0E0100130CA2EC7F18A215
B8EC3FB0A2EC1FE0A36E5AA26E5AA36EC8FCA21406A35CA25CA2123C007E5BB4FC5CA25C
EAFE01387C0380D87007C9FCEA3C1EEA0FFCEA03F02E3F7EAA33>I<003FB612E0A29038
C0003F90C713C0003CEC7F800038ECFF00A20030495A0070495AA24A5A0060495AA24A5A
4A5AA2C7485A4AC7FC5B5C495A13075C495A131F4A1360495A495AA249C712C0485AA248
5A485A1501485A48481303A24848EB07804848131F00FF14FF90B6FCA2232B7DAA2B>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmsy10 17.28 1
/Fg 1 14 df<953801FFFE063FEBFFF00503B7FC051F16E0057F16F80403B9FC040FDA00
0314C0043F01E0D9001F13F04C48C800017F922601FFF09238003FFE4B01C0EE0FFFDB0F
FECA000113C0DB1FF8716C7E4B48727EDBFFC0F00FFC4A49727E4A48CCEA01FF4A48737F
4A48747EDA1FE0F21FE04A48747E4A48747E4ACE6C7E4948757E4A1B0049481C7F494876
7E010F8A4A1C1F4948767E4948767EA249D06C7E017E1D0101FE8A491D0000018B491E7E
00031F7F498A00072080491E1F000F20C0491E0FA2001F20E0491E07A2003F20F090D212
03A34820F8007E1F01A500FE20FC481F00B06C1F01007E20F8A5007F1F036C20F0A36D1E
07001F20E0A26D1E0F000F20C0A26D1E1F000720806D1E3F000320006D6600011F7E6D1E
FE0000676D1D01017E66017F1D036D6C525AA26D6C525A6D6C525A6E1C3F0107666D6C52
C7FC6D6C1CFE6E1B016D6C515A6E6C505A6E6C505A6E6C505ADA0FF8F27FC06E6C505A6E
6C4F90C8FC6E6C6CF007FE6E6D4E5ADB3FF0F03FF06F6C4E5ADB0FFE4D485A922603FFC0
040F90C9FC6F01F0EE3FFE9226007FFE923801FFF893263FFFE0021F5B040F01FF0103B5
12C0040391B7CAFCDC007F16F8051F16E0050393CBFCDD003F14F0060149CCFC7E8678E6
8F>13 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmbx12 17.28 13
/Fh 13 121 df<EA01FCEA07FF4813804813C04813E04813F0A2B512F8A76C13F0A26C13
E06C13C06C13806C1300EA01FCC8FCB3A4EA01FCEA07FF4813804813C04813E04813F0A2
B512F8A76C13F0A26C13E06C13C06C13806C1300EA01FC154074BF2D>58
D<F00FE04E7EA24E7EA34E7EA24E7EA34D7FA24D80A24D80A34D80A24D80A34D80A2DD7F
BF7FA2181F05FF8017FE04016D7FA24D7E04038217F804076D80A24D7E040F8217E0041F
6D80A24D7F043F825F047F6E7FA294C77E4C825E03016F7FA24C800303845E03076F80A2
4C80030F845E031F6F80A24C81033F845E037F707F93B9FCA292BA7EA24A85A203FCC912
070203865D020771805D86020F864B82021F865D87023F864B83027F8692CBFC874A864A
840101875C496C728090381FFFC0B700E092B812FEA66F647BE37A>65
D<B700C0083FB612F070627097B7FCA37061D800010DF8C7FC70F103EFA202FD6DF107CF
A202FC6DF10F8FA36F6DF01F0FA26F6D183EA26F6D187CA26F6D18F8A36F6DEF01F0A26F
6DEF03E0A26F6DEF07C0A26F6DEF0F80A3706DEE1F00A2706D163EA2706D5EA2706D5EA3
706D4B5AA2706D4B5AA2706D4B5AA2706D4B5AA3716D4AC7FCA2716D143EA2716D5CA271
6D5CA3716D495AA2716D495AA2716D495AA2716D495AA3726D48C8FCA272EBC03EA2726D
5AA2726D5AA372EBF9F0A272EBFFE0A2725CA2725CA37390C9FCA2735AA2735A90381FFF
C0B700F86E480207B812F0A3735AA2735A8C627AE199>77 D<DBFFFCEC01E0020FD9FFE0
1303027F02FC130749B7130F0107EEC01F011F16F049D9C007EBF83F4948C7383FFE7FD9
FFF8020FB5FC4801E014014849804849153F91C97E484882001F834982003F83845B007F
187FA2193FA200FF181FA27F190FA27FA26D17078080806C01F893C7FC80ECFF8015F86C
ECFFC016FC6CEDFFE017FE6CEEFFE018F86C17FE6C717E6C846C846D17F86D836D836D83
13036D18806D6C17C0020F17E01401DA000F16F01500040715F8EE007F1703050014FC18
3F84060713FE84A2007C8300FC83A2197FA3193F7EA31AFC7EA27F1AF86D177F7F1AF06D
17FF6D18E06D5E01FF18C06E4B138002E04B130002F84B5A02FFED3FFC01CF01E0ECFFF8
018301FF010F5B010191B65A6D6C5E48011F93C7FC48010315FC48D9003F14E048020149
C8FC476677E35A>83 D<B800FC047FB612E0A6D800070280CB6CEB80006D6EDE07FCC7FC
666D6E611D0F6D6E611D1FA26E6D611D3F6E6D611D7F6E6D96C8FC65A26E6D4D5AA26E6E
5F1C036E6E5F1C076E6E5F1C0FA26E6E5F1C1F6F6D5F1C3F6F6D5F1C7FA26F6D4CC9FCA2
6F6D5E1B016F6E5D1B03A26F6E4A5AA26F6E5D1B0F6F6E5D1B1F706D5D1B3FA2706D5D1B
7F706D92CAFC63706D5C1A01A2706E485AA27002C05B1A077002E05B1A0F7002F05B1A1F
A27101F85B1A3F7101FC5B1A7F7101FE90CBFC62A2716D5AA2715CA2715CA3715CA2715C
A2725BA2725BA37290CCFCA2725AA2725AA2725A73637DE17A>86
D<913803FFFE027FEBFFF00103B612FE010F6F7E4916E090273FFE001F7FD97FE001077F
D9FFF801017F486D6D7F717E486D6E7F85717FA2717FA36C496E7FA26C5B6D5AEB1FC090
C9FCA74BB6FC157F0207B7FC147F49B61207010F14C0013FEBFE004913F048B512C04891
C7FC485B4813F85A5C485B5A5CA2B55AA45FA25F806C5E806C047D7F6EEB01F96C6DD903
F1EBFF806C01FED90FE114FF6C9027FFC07FC01580000191B5487E6C6C4B7E011F02FC13
0F010302F001011400D9001F90CBFC49437CC14E>97 D<92380FFFC04AB512FC020FECFF
80023F15E091B712F80103D9FE037F499039F0007FFF011F01C0011F7F49496D7F4990C7
6C7F49486E7F48498048844A804884485B727E5A5C48717EA35A5C721380A2B5FCA391B9
FCA41A0002C0CBFCA67EA380A27EA27E6E160FF11F806C183F6C7FF17F006C7F6C6D16FE
6C17016D6C4B5A6D6D4A5A6D01E04A5A6D6DEC3FE0010301FC49B45A6D9026FFC01F90C7
FC6D6C90B55A021F15F8020715E0020092C8FC030713F041437CC14A>101
D<EB0FE0EB3FF8497E48B5FCA24880A24880A76C5CA26C91C7FCA238007FFC6D5AEB0FE0
90C9FCAF903807FF80007FB5FCA6C6FC7F7FB3B3AEB712C0A622657BE42C>105
D<903807FF80B6FCA6C6FC7F7FB3B3B3B3ADB712E0A623647BE32C>108
D<902607FF80D91FFFEEFFF8B691B500F00207EBFF80040702FC023F14E0041F02FF91B6
12F84C6F488193267FE07F6D4801037F922781FE001F9027E00FF0007FC6DA83F86D9026
F01FC06D7F6DD987F06D4A487F6DD98FC0DBF87EC7804C6D027C80039FC76E488203BEEE
FDF003BC6E4A8003FC04FF834B5FA24B5FA24B94C8FCA44B5EB3B2B7D8F007B7D8803FB6
12FCA67E417BC087>I<902607FF80EBFFF8B6010FEBFF80047F14F00381B612FC038715
FF038F010114C09227BFF0003F7FC6DAFFC0010F7F6D91C76C7F6D496E7F03F86E7F4B6E
7F4B17804B6F13C0A27313E0A27313F0A21BF885A21BFCA3851BFEAE4F13FCA41BF861A2
1BF0611BE0611BC06F92B512801B006F5C6F4A5B6F4A5B03FF4A5B70495B04E0017F13C0
9226CFFC03B55A03C7B648C7FC03C115F803C015E0041F91C8FC040313E093CBFCB3A3B7
12F0A64F5D7BC05A>112 D<913A3FFF8007800107B5EAF81F011FECFE7F017F91B5FC48
B8FC48EBE0014890C7121FD80FFC1407D81FF0801600485A007F167F49153FA212FF171F
A27F7F7F6D92C7FC13FF14E014FF6C14F8EDFFC06C15FC16FF6C16C06C16F06C826C826C
826C82013F1680010F16C01303D9007F15E0020315F0EC001F1500041F13F81607007C15
0100FC81177F6C163FA2171F7EA26D16F0A27F173F6D16E06D157F6D16C001FEEDFF806D
0203130002C0EB0FFE02FCEB7FFC01DFB65A010F5DD8FE0315C026F8007F49C7FC48010F
13E035437BC140>115 D<007FB600C0017FB512F8A6D8001F01F8C70007EBF0006D0401
90C7FC6D6D5D6D6D4A5A6D6D4A5A70495A6D4C5A6E7F6E6D495A6E6D495A7049C8FC6E4A
5A6E6D485A6E6D485A6E13FFEF8FF06EEC9FE06FEBFFC06F5C6F91C9FC5F6F5B816F7F6F
7F8481707F8493B57E4B805D4B80DB0FF37FDB1FE17F04C080153F4B486C7F4B486C7F4A
486D7F4A486D7F4A5A4B6D7F020F6E7F4A486D7F4A486D804A5A4AC86C7F49486F7F4A6F
7F0107707FEB3FFFB600F049B7FCA650407EBF55>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmr17 17.28 33
/Fi 33 120 df<00E0ED0380A56C150700701600A300785D0038150E003C151EA26C5D00
1F157C6C6C5C6C6C495A6D13036C6C495AD801FCEB1FC06CB46CB45A6DB5C7FC6D5B6D5B
010713F001001380291A74E342>21 D<120FEA3FC0EA7FE0EAFFF0A6EA7FE0EA3FC0EA0F
000C0C748B24>46 D<187018F8A2170118F0A2170318E0A2170718C0A2170F1880A2171F
1800A25F173EA2177E177CA217FC5F16015FA216035FA216075FA2160F5FA2161F94C7FC
A25E163EA2167E167CA216FC5E15015EA215035EA215075EA2150F5EA2151F93C8FCA25D
153EA2157E157CA215FC5D14015DA214035DA214075DA2140F5DA2141F92C9FCA25C143E
A2147E147CA214FC5C13015CA213035CA213075CA2130F5CA2131F91CAFCA25B133EA213
7E137CA213FC5B12015BA212035BA212075BA2120F5BA2121F90CBFCA25A123EA2127E12
7CA212FC5AA21270358F7AEA42>I<4AB4FC021F13F0027F13FC903901FF01FF903A03F8
003F80D90FE0EB0FE049486D7E49486D7E49C76C7E017E140049157E0001167F49810003
178049151F000717C049150F000F17E0A3001F17F0491507A2003F17F8A54848ED03FCA7
00FF17FEB3A8007F17FCA56D1507A3003F17F8A4001F17F06D150FA2000F17E0A36C6CED
1FC0A2000317806D153F000117006D5D6C6C15FE017E5D017F14016D6C495A6D6C495A6D
6C495AD903F8EB3F806DB448B4C7FC9039007FFFFC021F13F0020190C8FC37607BDD42>
I<EC01C014031407140F143F147FEB03FF130F90B5FCB6FCEBFC7F13F01300C7FCB3B3B3
B3A24A7EA2010713FCB812E0A42B5E74DD42>I<EC0FFE91387FFFE00103B512F8010F14
FE903A1FE00FFF8090263E000113E001FC6D6C7ED801F06E7E4848EC0FFC496E7E48486E
7E48C81480000E81001E6F13C0121C003CEE7FE012380078EE3FF01270A3B46CED1FF813
E0A27FA66C5A6C5A0006C913F0CA123FA318E0177FA2EFFFC0A218805E18004C5A16075F
4C5A5F161F4C5A4C5A5F4CC7FC4B5A4B5A5E4B5A4B5A4B5A4B5A4BC8FC157E5D4A5A4A5A
4A5A4A5A4A5A4AC9FC143E4A15385C495A495A49481570495A49C9FC131E5B4916F05B48
4816E0484815014848150348B8FCA25A5A5AB912C0A4355E7ADD42>I<486C150301E015
0F01FC153FD9FF80EB03FE02F8EB3FFC91B65A5F5F178094C7FC16FC01DF14F001C31480
9026C03FF8C8FC91CAFCB3A34AB47E021F13F0027F13FC9039C1FE00FFD9C3E0EB3F80D9
CF80EB1FE001DFC76C7E01FC6E7E496E7E49140183496E7E5BCAEA7F8018C0A2173F18E0
A218F0A2171FA318F8A6EA1F80EA7FC07F12FF7FA218F05B173F5B4916E00070C9FCA200
78EE7FC0A26CEEFF80A26C4B1300A26C4B5A6C6C4A5A6D5D6C6C4A5AD801F8EC3FE06C6C
4A5A017F49485A90273FF00FFEC7FC010FB512F8010314E001001480DA0FF8C8FC35607A
DD42>53 D<4AB47E021F13F0027F13FC49B6FC902607FE007FD90FF0EB3FC04948EB0FE0
49486D7E49486D7E49C76C7E484881484814004848157F18804848153F001F17C0A24848
151F18E0A2007F17F049150FA300FF17F8A418FC1707A618FEA2170F127FA46C7E171FA2
121F6D153F000F163717776C6C15676C6C15E70001ED01C77F6C6CEC03876D6CEB07076D
6C130ED90FE0133CD907F801F813FC0101B512F06D14C0021F130091C8120FA218F8A418
F0171FA218E0A2173F18C0A2EF7F80EA07F0486CEDFF00487E4C5A5F16035F4C5A49140F
6C484A5A01804A5A90C8485A6C6C4AC7FC01E0495A6C6CEB07F86CB4EB3FF06C6CB512C0
011F91C8FC010713FC010013E037607BDD42>57 D<933801FFE0043F13FF4BB612E0923A
07FE001FF8DB1FC0EB00FE037EC8EA1F80DA01F8ED07E0DA03E0ED01F0DA0F80ED007C4A
CA7E023C170F02F8EF07C04948717E4948717E4948717E4A187849CC7E011E8549854973
7EEFFF8049020701F06E7E49021F01FC1401000192267F807F814848902801FE000FC06D
7EDB03F8EB03E04848D90FF06D6C147890C74848D900781438484A486E143C4B4880000E
92C86C141C001E4A181E001C4948DB07FE130E4B6F7E003C0103190F003849486F80A200
784A6F1580140F00701B034A5AA300F01CC0481B014A5AAC6E7E7E1270A36E7E12781407
00386E4BEC0380A2003C6D6C5D001C13016F5D001E6D6C4B1407000E6E1900000F6F141E
6F6C4A5C6C6E6C9139787F800E6D6D6CD901F0141E6C6CD903F8902603E03F131CDB01FE
D90FC0EBC03C6C6C903D007F807F001FE0F8000092261FFFFC903807FFF06D020701F06D
13C0017802000180D9007FC7FC94CCFC7F7F7F6D7E806D7E6D7E6D6CF11FC0023C197F02
1F953803FF006E6CEF0FFCDA03E0EF7FE0DA01F8933803FF80DA007EDC3FFCC7FCDB1FC0
913807FFE0DB07FE902603FFFEC8FC0301B712E0DB003F02FCC9FC040149CAFC5A667AE4
67>64 D<170FA34D7EA24D7EA34D7EA34D7EA34C7F17DFA29338039FFC178FA29338070F
FE1707040F7FEE0E03A2041E80EE1C01A2043C80EE3800A24C80187FA24C80183FA24B48
80181F0303814C130FA203078193C71207A24B81030E80A24B8284A24B8284A24B82197F
03F0824B153FA20201834B151FA202038392B8FCA24A83A292C91207020E8385A24A8485
023C84023882A20278840270177FA202F0844A173FA24948841A1FA24948841A0FA249CB
7F1A074985865B496C85497E48486C4D7F000F01F8051F13F0B60407B612F0A45C657DE4
63>I<DD7FF81560040FB56C14E0047F14E00303B600FC1301030F9038E003FEDB3FFEC7
383F8003DBFFF0EC07C04A01C0913803F007020790C9EAF80FDA0FFC167C4A48EE1E1FDA
7FE0160F4A48EE07BF4949EE03FF4990CAFC4948834948834A187F495A013F193F494818
1F5C01FF190F485BA24890CC1207A248481903A2485A1B01121FA25B123F1B005BA2127F
1C00A4485AB06C7EA5123F1CE07FA2121F7FA2000F1A011CC06C7EA26C7E1B036C6D1980
1B076C7F017F1A006E606D6C181E131F6D6C606E18386D6C18786D6C606D6D4C5A6D6D4C
5A6E6C1607DA1FF84C5A6E6C4CC7FC6EB4167C020101C04A5A6E01F0EC07F0DB3FFEEC1F
C092280FFFE001FFC8FC030390B512FCDB007F14F0040F14809326007FF8C9FC53667AE3
60>67 D<BC1280A4C601FCC81201D93FF8DB001F13C0011F170319001A7F1A3F1A1F1A0F
1A07A21A03A21BE01A01A41A00A61B701870A41B00A418F0A4170117031707170F177F91
B7FCA402F8C7127F170F1707170317011700A41870A31B0EA41B1C95C8FCA51B3C1B38A3
1B78A41BF0A31A01A21A031A07A2F20FE01A1F1A7F1AFF1903013F171FD9FFFC0303B5FC
BC12C0A44F6279E15A>69 D<B7020FB612F0A4C691C9000FEBF000D93FFC040313C06D48
705BB3B3A391BAFCA402F8C91201B3B3A7496C4C7F90B5040F13F0B7020FB612F0A45462
79E163>72 D<B500FC071FB51280A36E61C6F58000013F51C7FCD91DFFF177FCA2011C6D
18E7A36E6CEF01C7A36E6CEF0387A36E6CEF0707A26E6C170EA36E6C171CA36E6C1738A3
6E6C1770A26E6D16E0A36F6CED01C0A36F6CED0380A36F6CED0700A26F6C150EA36F6C5D
A36F6C5DA36F6C5DA26F6D5CA3706C495AA3706C495AA3706C49C7FCA2706C130EA3706C
5BA3706C5BA3706C5BA3706D5AA294387FC1C0A394383FE380A3DD1FF7C8FCA3EF0FFEA2
013E6F5AA2137F715A2601FFC04F7E000701F896383FFF80B66C6D48023FB61280A3715A
696278E17A>77 D<DA07FF1403023F01F05B49B512FC010702FF5B90260FFC0013C0D93F
E090380FF01FD97F80EB03F801FEC86C5A4848157E4848ED1F7F48486F5A4848815B001F
824981003F8290CAFC4883A2007E83A212FE84A384A27EA36D82A26C7EA26D93C7FC6C7E
7F7F6C7E6D7E6C13E06C13FCECFFC06C14F86CECFF806C15F86DECFF80011F15E06D15F8
010315FE01006F7E021F81020181DA003F80030380DB003F7F04037FEE007FEF1FFF7113
8017037113C083A2F07FE0183FA2181F00E018F0180FA41807A27EA47E19E0180F7E19C0
7E6C171F19806D163F6D17006D5E6D16FE486C5E6D4B5AD8FC7F1503D91F80EC0FF026F8
0FE04A5AD907FCEC7F8029F001FFE003FFC7FC6D6CB512FC48011F14F0020314C0489026
001FFEC8FC3C667AE349>83 D<003FBC12F8A49126C000039038C0000301FCC76C49EB00
7F01F0190F01C019074848F103FC90C81701007E1A00007C1B7CA300781B3CA400701B1C
A600F01B1E481B0EA7C91800B3B3B3A54C7FA2041F13F84AB87EA457627CE160>I<EC3F
F0903803FFFE010F6D7E90393FC03FE090397E0007F801F86D7ED801E06D7E48486D7E48
486E7E48C86C7E7F01F06E7E487E6D6E7EA3707EA36C5AEA03E0C9FCA6167FED7FFF020F
B5FC91387FF807903801FF80903807FC00EB1FF0EB7FC0495AD803FEC7FC485A120F5B48
5A485AA2484817E0A312FF5BA2160FA3161F6D141B007F153B16736D913971FC01C06C6C
14E1001FEC01C1D80FFC903A0780FE03806C6C903A0F00FF07002701FF807E6DB4FC2700
7FFFF86D5A011F01E0EB1FF8010190C7EA07E03B417ABF42>97 D<4AB47E020F13F8023F
13FE9139FF007F80D903FCEB07E0D907F0EB01F0D91FE0EB007849488049488049C87E48
485D4915FF00034B138048485CA2485AA2485AA2003F6F130049EC007C94C7FC127FA35B
12FFAD127F7FA4123F7FA2001FEE01C07F000F16036D168012076C6C15076D160000015E
6C6C151E6D6C5C6D6C5C6D6C5CD90FF8495AD903FCEB07C0903A00FF803F8091263FFFFE
C7FC020F13F80201138032417CBF3A>99 D<181EEF3FFEEE07FFA4EE000F1703A21701B3
AAEDFF80020F13F8023F13FE9139FF803F81903A03FC0007C14948EB01E1D91FE0EB00F9
4948147D4948143D49C8121F4848150F491507120348481503491501120F121F5BA2123F
5B127FA45B12FFAD127F7FA3123FA27F121FA26C6C1503A26C6C150712036D150F6C6C15
1F0000163D137F6D6CECF9FF6D6CEB01F1D90FF0D903C113C06D6CD90F81EBFF80D901FF
EB7F019039007FFFFC021F13E00201010091C7FC41657CE349>I<EC03FE91381FFFE091
B512F8903901FE03FE903A07F0007F8049486D7ED93FC06D7E49C76C7E496E7E49140348
488148481401000782491400000F8283485A1880123F49153FA2007F17C0A35BA212FF90
B8FCA30180CAFCA9127F7FA3123FA27F121FEF01C06C7E17036C6C1680A26C6C15070001
EE0F006D150E6C6C151E6D6C5C6D6C5C6D6C5CD907F0EB03E0D903FC495A902700FF803F
C7FC91383FFFFC020F13F00201138032417CBF3A>I<F03F80DA03FC903801FFE091273F
FFC00713F091B539F01FC1F8903B03FC03FC3E03903A07F000FE784948EB7FE04948EB3F
C04948011FEB01F049C76C6CC7FC01FE6E7EA248486E7EA2000382A2491401000782AA00
035E6D1403A200015EA26C6C4A5AA2017F4A5A6D6C495A6D6C495A496C49C8FCD937F013
FE903973FC03FC0160B512F0D9E03F13C0DA03FCC9FC4848CBFCA57FA27FA27F6C7E13FF
91B512FE6DECFFF06D15FE6D6F7E6D16E084013F16FC01FEC700017FD803F8EC001FD807
E0ED03FF4848030013804848167F003FEF3FC090CA121F127EF00FE012FE481707A66C17
0F007E18C0A2007F171F6C6CEE3F806C6CEE7F00000F177ED807F04B5A6C6C4B5A6C6C4B
5AD8007FED1FC0D93FE0ECFF80D90FFED90FFEC7FC0101B612F0D9003F1480020101F0C8
FC3D5E7DBF42>103 D<EB03C0EA07FFB5FCA41201EA007FA2133FB3AAEE7FE0923803FF
FC030F13FFDB3F0013C00378EB1FE04B6D7EDAC1C06D7EDAC3808002C7C7120302CE8117
0114DC14D802F86E7E5CA35CA35CB3B3496C4A7F496C4A7FB6D8F003B612C0A442647DE3
49>I<133C13FF487F487FA66C5B6C90C7FC133C90C8FCB3A2EB03C0EA07FF127FA41201
EA007FA2133FB3B3AC497E497EB612E0A41B5F7DDE23>I<EB03C0EA07FFB5FCA41201EA
007FA2133FB3B3B3B3AD497E497EB612F0A41C647DE323>108 D<D903C0D9FFC0EC07FE
D807FF010301F891381FFFC0B5010F01FE027F13F0923D3F00FF8001F807FC0378903B3F
C003C001FEDAC1E090261FE00FC77E0001D9C3C090260FF01E6E7ED8007F49902607F81C
6E7E02C7C75CD93FCE6E6C486E7E02CC166002DC16E002D85E02F8DA01FF6F7E4A5EA24A
93C8FCA44A5DB3B3496C4A6C4B7E496C4A6D4A7EB6D8F007B6D8803FB512FCA4663F7CBE
6F>I<D903C0EB7FE0D807FF903803FFFCB5010F13FFDB3F0013C00378EB1FE04B6D7E00
01D9C1C06D7E27007FC3808002C7C71203D93FCE81170114DC14D802F86E7E5CA35CA35C
B3B3496C4A7F496C4A7FB6D8F003B612C0A4423F7DBE49>I<EDFF80020F13F8023F13FE
9139FF007F80D903FCEB1FE0D907F0EB07F0D90FC0EB01F8D93F80EB00FE49C8127F017E
81496F7E48486F7E00038349150700078348486F7EA2001F83491501A2003F83A348486F
7EA400FF1880AC007F1800A26D5DA2003F5FA36C6C4B5AA36C6C4B5A00075FA26C6C4B5A
6C6C4B5AA26C6C4B5A017F4BC7FC6D6C14FE6D6C495AD90FF0EB07F8D903FCEB1FE0D900
FFEB7F806EB5C8FC020F13F8020113C039417CBF42>I<D903C0EB7FC0D807FF903807FF
FCB5011F13FFDB7F0013C003F8EB1FF0DAC3E0EB07F80001D9C7806D7E26007FCFC76C7E
02DE6E7ED93FFC6F7E4A6F7E4A82181F4A82727E5C727EA2727EA3727EA41A8084AC4E13
00A54E5AA2611807A24E5A6E5E181F6E4B5A6E5E187F6E4B5A02DE4A90C7FC02CF4A5ADA
C780495ADAC3C0EB0FF0DAC1F0EB3FE0913AC07E01FF806FB448C8FC030F13F803001380
93CAFCB3A3497E497EB612F0A4415B7DBE49>I<9039078003F8D807FFEB0FFFB5013F13
C092387C0FE0913881F01F9238E03FF00001EB838039007F8700148FEB3F8E029CEB1FE0
EE0FC00298EB030002B890C7FCA214B014F0A25CA55CB3B0497EEBFFF8B612FCA42C3F7C
BE33>114 D<9139FFE00180010FEBFC03017FEBFF073A01FF001FCFD803F8EB03EFD807
E0EB01FF48487F4848147F48C8123F003E151F007E150F127CA200FC1507A316037EA27E
7F6C7E6D91C7FC13F8EA3FFE381FFFF06CEBFF806C14F86C14FF6C15C06C6C14F0011F80
010714FED9007F7F02031480DA003F13C01503030013E0167F00E0ED1FF0160F17F86C15
071603A36C1501A37EA26C16F016037E17E06D14076DEC0FC06D1580D8FDF0141FD8F8F8
EC7F00013E14FC3AF01FC00FF80107B512E0D8E001148027C0003FF8C7FC2D417DBF34>
I<1438A71478A414F8A31301A31303A21307130F131FA2137F13FF1203000F90B6FCB8FC
A3260007F8C8FCB3AE17E0AE6D6CEB01C0A316036D6C148016076D6C14006E6C5A91383F
C01E91381FF07C6EB45A020313E09138007F802B597FD733>I<D903C0150FD807FFED1F
FFB50203B5FCA40001ED0007D8007F1501A2013F81B3B25FA35FA35F011F15066E140E5F
130F6E4A7F01075D6D6C494813E0D901FE4948EBFFC0903A00FFC01F8091393FFFFE0002
0F13F8020001C0EC800042407DBE49>I<B6D8801FB500E090B512F8A4000301F0C7D87F
FCC7001F1380C601C0DA3FF0913807FE00051F6F5A017F030F6F5A64133F05075E6E8101
1F030F5EA26E6F1403010F031F5E171D6E6F14070107033D93C7FC17386E6F5C01030378
150EEF707F6E70131E010103F0151CEFE03F6E70133C6D02011638EFC01F03806F137802
7F01031670EF800F03C06F13F0023F01075EEF000703E0EDF801021F495E040E130303F0
EDFC03020F011E5E041C130103F8EDFE070207013C93C8FC0438130003FC6F5A02030178
150E0470147F03FE169E020101F0159C4C143F03FF16FC6E5F4C141FA2037F5E4C140FA2
033F5E93C81207A26F5E031E1503030E5E5D3F7FBD60>119 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 804 556 a Fi(ST)-11 b(A)g(T)43 b(592)g(/)g(CSE)g(590)g(MM)g
(Handout)h(1.1)1081 738 y Fh(SVM:)53 b(A)h(simple)g(example)1526
917 y Fi(c)1484 921 y Fg(\015)p Fi(Marina)44 b(Meil\025)-66
b(a)1172 1104 y(mmp@stat.w)l(ashington.edu)324 1497 y
Ff(Data:)42 b(4)33 b(v)m(ectors)h(in)d(the)i(plane)g(and)f(their)g(lab)
s(els)1292 1709 y Fe(x)1347 1724 y Fd(1)1442 1709 y Ff(=)55
b(\()p Fc(\000)p Ff(2)p Fe(;)17 b Fc(\000)p Ff(2\))249
b Fe(y)2242 1724 y Fd(1)2336 1709 y Ff(=)56 b(+1)1369
1854 y Fe(x)1424 1869 y Fd(2)1519 1854 y Ff(=)f(\()p
Fc(\000)p Ff(1)p Fe(;)17 b Ff(1\))249 b Fe(y)2242 1869
y Fd(2)2336 1854 y Ff(=)56 b(+1)1446 1999 y Fe(x)1501
2014 y Fd(3)1597 1999 y Ff(=)f(\(1)p Fe(;)17 b Ff(1\))248
b Fe(y)2242 2014 y Fd(3)2336 1999 y Ff(=)56 b Fc(\000)p
Ff(1)1369 2145 y Fe(x)1424 2160 y Fd(4)1519 2145 y Ff(=)f(\(2)p
Fe(;)17 b Fc(\000)p Ff(2\))249 b Fe(y)2242 2160 y Fd(4)2336
2145 y Ff(=)56 b Fc(\000)p Ff(1)324 2579 y(The)33 b(Gramm)e(matrix)g
Fe(G)c Ff(=)h([)p Fe(x)1490 2543 y Fb(T)1490 2604 y(i)1545
2579 y Fe(x)1600 2594 y Fb(j)1637 2579 y Ff(])1664 2594
y Fb(i;j)t Fd(=1:)p Fb(l)1337 2972 y Fe(G)55 b Ff(=)1601
2727 y Fa(2)1601 2873 y(6)1601 2923 y(6)1601 2972 y(6)1601
3026 y(4)1736 2791 y Ff(8)160 b(0)122 b Fc(\000)p Ff(4)g(0)1736
2911 y(0)160 b(2)h(0)121 b Fc(\000)p Ff(4)1697 3032 y
Fc(\000)p Ff(4)h(0)161 b(2)f(0)1736 3152 y(0)122 b Fc(\000)p
Ff(4)g(0)160 b(8)2493 2727 y Fa(3)2493 2873 y(7)2493
2923 y(7)2493 2972 y(7)2493 3026 y(5)324 3362 y Ff(The)33
b(dual)f(Lagrangean)g(to)g(b)s(e)h(maximized)e(\(sub)5
b(ject)34 b(to)e Fe(\013)2569 3377 y Fb(i)2641 3362 y
Fc(\025)45 b Ff(0\))32 b(is)466 3618 y Fe(L)p Ff(\()p
Fe(\013)q Ff(\))83 b(=)913 3535 y Fa(X)961 3718 y Fb(i)1049
3618 y Fe(\013)1111 3633 y Fb(i)1162 3618 y Fc(\000)1271
3551 y Ff(1)p 1271 3595 49 4 v 1271 3687 a(2)1347 3535
y Fa(X)1395 3718 y Fb(i)1483 3618 y Fe(\013)1545 3633
y Fb(i)1573 3618 y Fe(\013)1635 3633 y Fb(j)1672 3618
y Fe(y)1720 3633 y Fb(i)1748 3618 y Fe(y)1796 3633 y
Fb(j)1832 3618 y Fe(x)1887 3577 y Fb(T)1887 3643 y(i)1942
3618 y Fe(x)1997 3633 y Fb(j)754 3843 y Ff(=)g Fe(\013)975
3858 y Fd(1)1037 3843 y Ff(+)22 b Fe(\013)1197 3858 y
Fd(2)1258 3843 y Ff(+)g Fe(\013)1418 3858 y Fd(3)1480
3843 y Ff(+)g Fe(\013)1640 3858 y Fd(4)1701 3843 y Fc(\000)h
Ff(4)p Fe(\013)1913 3802 y Fd(2)1912 3868 y(1)1974 3843
y Fc(\000)g Fe(\013)2137 3802 y Fd(2)2136 3868 y(2)2198
3843 y Fc(\000)g Fe(\013)2361 3802 y Fd(2)2360 3868 y(3)2422
3843 y Fc(\000)f Ff(4)p Fe(\013)2633 3802 y Fd(2)2632
3868 y(4)2694 3843 y Fc(\000)h Ff(4)p Fe(\013)2905 3858
y Fd(1)2944 3843 y Fe(\013)3006 3858 y Fd(3)3068 3843
y Fc(\000)g Ff(4)p Fe(\013)3279 3858 y Fd(2)3318 3843
y Fe(\013)3380 3858 y Fd(4)754 3988 y Ff(=)83 b(\(2)p
Fe(\013)1062 4003 y Fd(1)1123 3988 y Ff(+)22 b Fe(\013)1283
4003 y Fd(3)1323 3988 y Ff(\))g Fc(\000)g Ff(\(2)p Fe(\013)1631
4003 y Fd(1)1693 3988 y Ff(+)g Fe(\013)1853 4003 y Fd(3)1892
3988 y Ff(\))1930 3947 y Fd(2)1992 3988 y Fc(\000)g Fe(\013)2153
4003 y Fd(1)913 4134 y Ff(+\()p Fe(\013)1089 4149 y Fd(2)1150
4134 y Ff(+)g(2)p Fe(\013)1359 4149 y Fd(4)1399 4134
y Ff(\))g Fc(\000)g Ff(\()p Fe(\013)1658 4149 y Fd(2)1720
4134 y Ff(+)g(2)p Fe(\013)1929 4149 y Fd(4)1968 4134
y Ff(\))2006 4093 y Fd(2)2068 4134 y Fc(\000)g Fe(\013)2229
4149 y Fd(4)324 4345 y Ff(The)33 b(parts)f(dep)s(ending)g(on)g
Fe(\013)1438 4360 y Fd(1)1477 4345 y Fe(;)17 b(\013)1583
4360 y Fd(3)1654 4345 y Ff(and)32 b Fe(\013)1905 4360
y Fd(2)1945 4345 y Fe(;)17 b(\013)2051 4360 y Fd(4)2122
4345 y Ff(can)32 b(b)s(e)g(maximized)e(separately)-8
b(,)32 b(and)324 4466 y(after)g(some)h(short)f(calculations)f(w)m(e)j
(obtain:)1523 4677 y Fe(\013)1585 4692 y Fd(1)1680 4677
y Ff(=)55 b(0)166 b Fe(\013)2088 4692 y Fd(4)2183 4677
y Ff(=)55 b(0)1503 4857 y Fe(\013)1565 4872 y Fd(2)1660
4857 y Ff(=)1801 4789 y(1)p 1801 4834 V 1801 4925 a(2)2026
4857 y Fe(\013)2088 4872 y Fd(3)2183 4857 y Ff(=)2324
4789 y(1)p 2324 4834 V 2324 4925 a(2)1918 5251 y(1)p
eop
%%Page: 2 2
2 1 bop 324 548 a Ff(Hence,)34 b(the)f(supp)s(ort)g(v)m(ectors)h(are)e
Fe(x)1718 563 y Fd(2)1791 548 y Ff(and)h Fe(x)2036 563
y Fd(3)2075 548 y Ff(.)44 b(F)-8 b(rom)31 b(these,)j(w)m(e)f(obtain)
1031 807 y Fe(w)85 b Ff(=)1345 724 y Fa(X)1393 906 y
Fb(i)1481 807 y Fe(\013)1543 822 y Fb(i)1572 807 y Fe(y)1620
822 y Fb(i)1647 807 y Fe(x)1702 822 y Fb(i)1786 807 y
Ff(=)1928 739 y(1)p 1928 784 49 4 v 1928 875 a(2)1986
807 y(\()p Fe(x)2079 822 y Fd(2)2141 807 y Fc(\000)23
b Fe(x)2296 822 y Fd(3)2336 807 y Ff(\))55 b(=)g(\()p
Fc(\000)p Ff(1)p Fe(;)17 b Ff(0\))1062 1034 y Fe(b)83
b Ff(=)g Fe(y)1393 1049 y Fd(2)1454 1034 y Fc(\000)23
b Fe(w)1627 993 y Fb(T)1681 1034 y Fe(x)1736 1049 y Fd(2)1831
1034 y Ff(=)56 b(0)324 1254 y(The)33 b(results)g(are)g(depicted)g(in)f
(the)h(\014gure)g(b)s(elo)m(w:)893 3149 y @beginspecial
0 @llx 0 @lly 650 @urx 578 @ury 2520 @rwi @setspecial
%%BeginDocument: fig-h1.1-svm-example.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: fig-h10-svm-example.eps
%%Creator: fig2dev Version 3.2 Patchlevel 0-beta3
%%CreationDate: Thu May 29 18:10:27 2003
%%For: s534@hilbert1.ms.washington.edu (Stat 534,,,,mscc)
%%Orientation: Portrait
%%BoundingBox: 0 0 650 578
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-35.0 595.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /endash 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Times-Roman /Times-Roman-iso isovec ReEncode
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 10912 m -1000 -1000 l 12412 -1000 l 12412 10912 l cp clip
 0.06000 0.06000 sc
7.500 slw
% Ellipse
n 1200 9600 300 300 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 10800 9600 300 300 0 360 DrawEllipse gs col0 s gr

45.000 slw
 [60] 0 sd
% Ellipse
n 3600 2400 300 300 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
% Polyline
n 6000 2400 m 6000 9600 l gs col0 s gr 
% Polyline
7.500 slw
 [60] 0 sd
gs  clippath
11253 4770 m 11373 4800 l 11253 4830 l 11415 4830 l 11415 4770 l cp
clip
n 600 4800 m 11400 4800 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 11253 4770 m 11373 4800 l 11253 4830 l 11253 4800 l 11253 4770 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
 [60] 0 sd
gs  clippath
5970 447 m 6000 327 l 6030 447 l 6030 285 l 5970 285 l cp
clip
n 6000 9900 m 6000 300 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 5970 447 m 6000 327 l 6030 447 l 6000 447 l 5970 447 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
30.000 slw
 [60] 0 sd
gs  clippath
3747 4830 m 3627 4800 l 3747 4770 l 3555 4770 l 3555 4830 l cp
clip
n 6000 4800 m 3600 4800 l gs col0 s gr gr
 [] 0 sd
% arrowhead
7.500 slw
n 3747 4830 m 3627 4800 l 3747 4770 l 3747 4800 l 3747 4830 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
 [15 45] 45 sd
n 3600 1200 m 3600 9600 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 8400 1200 m 8400 9600 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
gs  clippath
8253 3870 m 8373 3900 l 8253 3930 l 8415 3930 l 8415 3870 l cp
3747 3930 m 3627 3900 l 3747 3870 l 3585 3870 l 3585 3930 l cp
clip
n 3600 3900 m 8400 3900 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 3747 3930 m 3627 3900 l 3747 3870 l 3747 3900 l 3747 3930 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 8253 3870 m 8373 3900 l 8253 3930 l 8253 3900 l 8253 3870 l  cp gs 0.00 setgray ef gr  col0 s
60.000 slw
 [60] 0 sd
% Ellipse
n 8400 2400 300 300 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
/Times-Roman-iso ff 375.00 scf sf
3600 2400 m
gs 1 -1 sc (+) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman-iso ff 375.00 scf sf
6600 3600 m
gs 1 -1 sc (margin) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman-iso ff 375.00 scf sf
8400 2400 m
gs 1 -1 sc (-) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman-iso ff 375.00 scf sf
1200 9600 m
gs 1 -1 sc (+) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman-iso ff 375.00 scf sf
10800 9600 m
gs 1 -1 sc (-) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman-iso ff 375.00 scf sf
1200 9000 m
gs 1 -1 sc (x1) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman-iso ff 375.00 scf sf
3600 1800 m
gs 1 -1 sc (x2) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman-iso ff 375.00 scf sf
8400 1800 m
gs 1 -1 sc (x3) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman-iso ff 375.00 scf sf
10800 9000 m
gs 1 -1 sc (x4) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman-iso ff 375.00 scf sf
6000 7200 m
gs 1 -1 sc ( separating hyperplane) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman-iso ff 375.00 scf sf
3900 4500 m
gs 1 -1 sc (w) dup sw pop 2 div neg 0 rm  col0 sh gr
$F2psEnd
rs

%%EndDocument
 @endspecial 1918 5251 a(2)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
